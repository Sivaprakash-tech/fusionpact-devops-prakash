name: CI-CD to Azure VM (ACR + SSH)

on:
  push:
    branches:
      - main

env:
  FRONTEND_IMAGE: ${{ secrets.ACR_LOGIN_SERVER }}/frontend
  BACKEND_IMAGE: ${{ secrets.ACR_LOGIN_SERVER }}/backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}   # e.g. myreg.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}

      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.BACKEND_IMAGE }}:${{ github.sha }}

      - name: SSH deploy to VM and update images
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: ${{ secrets.VM_SSH_PORT }}
          script: |
            set -e
            # login to ACR
            docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }}
            # create dir and pull repo (or update)
            cd /home/${{ secrets.VM_USER }}/app || mkdir -p /home/${{ secrets.VM_USER }}/app && cd /home/${{ secrets.VM_USER }}/app
            if [ -d .git ]; then
              git pull
            else
              git clone https://github.com/<your-username>/<your-repo>.git .
            fi
            # update docker-compose images to new tags (simple sed replace)
            sed -i "s|myproject/frontend:latest|${{ env.FRONTEND_IMAGE }}:${{ github.sha }}|g" docker-compose.yml || true
            sed -i "s|myproject/backend:latest|${{ env.BACKEND_IMAGE }}:${{ github.sha }}|g" docker-compose.yml || true
            docker compose pull || true
            docker compose up -d --remove-orphans
